generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model OrderSuggestion {
  id String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  suggestedDate DateTime

  customer   Customer @relation(fields: [customerMobile], references: [mobile])
  customerMobile String      

  cartItems CartItem[]

  isActive Boolean
}

model CartItem {
  id        String @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  product_id String @db.VarChar(128)
  name      String @db.VarChar(128)
  product_unit String @db.VarChar(64)
  quantity  Float

  order   OrderSuggestion @relation(fields: [orderId], references: [id])
  orderId String
}

model CarmelaProduct {
  id          String   @id @unique @db.VarChar(128)
  name        String   @db.VarChar(128)
  tags_names  Json
  slug        String
  onsale      Boolean
  price       Float
  image       String
  unit_type   String
  selected    String
  text        String
  weight      Float?
  weight_type String?
  salePrice   String?
  instock     Boolean
  categories  Json
  related_ids String[]
  status      String
}

model Message {
  id               String   @unique @db.VarChar(200)
  status           String   @db.VarChar(64)
  type             String   @db.VarChar(64)
  type_extra_info  String
  timestamp        DateTime
  updated_at       DateTime
  from             String   @db.VarChar(64)
  contactId        String
  conversation     Json?
  pricing          Json?
  sessionId        String
  state            String?
  contextMessageId String?  @unique
  User             User     @relation(fields: [contactId], references: [mobile])
  Message          Message? @relation("MessageToMessage", fields: [contextMessageId], references: [id])
  Session          Session  @relation(fields: [sessionId], references: [id])
  other_Message    Message? @relation("MessageToMessage")
}

model Session {
  id          String    @id @unique @db.VarChar(200)
  start       DateTime  @default(now())
  end         DateTime?
  customer_id String    @db.VarChar(64)
  is_active   Boolean   @default(true)
  Message     Message[]
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?

  mobile    String    @unique @db.VarChar(16)
  firstName String    @db.VarChar(64)
  lastName  String?   @db.VarChar(64)
  messages  Message[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Customer {
  id         String @id @default(cuid())
  customerId Int    @unique
  email      String @unique
  mobile     String @unique
  firstName  String
  lastName   String

  orderSuggestions OrderSuggestion[]
}
